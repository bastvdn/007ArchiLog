package game;

import java.util.ArrayList;
import java.util.List;


/*
 * The UI class displays the actual state of the game. the main window is a string (fullString) and
 * its generated by concatenating all the small boxes (announcement, ennemy,...) inside the borderWindow
 *
 * */
public class UI {
    Game game;          // we need the game as a UI variable to keep track of the game
    String empty = "";
    StringBuilder fullString = new StringBuilder(empty);   //the string representing all the UI
    int aniSize;
    /*
     * Here are all the boxes, those can be replaced and modified easily
     * */
    List<String> borderWindow = new ArrayList<>();
    List<String> announcement= new ArrayList<>();
    List<String> announcementList= new ArrayList<>(10);
    List<String> enemy = new ArrayList<>();
    List<String> animations = new ArrayList<>();
    List<String> player = new ArrayList<>();
    List<String> actions = new ArrayList<>();
    List<String> actionList = new ArrayList<>();
    int playerAction = 0;
    int mobAction = 0;
    int lastEnnemyHp;
    int lastPlayerHp;

    /*
     * The size of the window
     * */

    int width = 100;
    int height = 20;
    String mode;

    /*
     * Class constructor
     * Initiate all the boxes
     * @param: game
     * @return
     *
     * */
    public UI(Game game0) {
        game = game0;
        resetBorderDisplay();
        resetEnnDisplay();
        resetAnnouncementDisplay();
        resetAnimationsDisplay();
        resetPlaDisplay();
        resetActionDisplay();
    }

    /*
     * getters and setters for usefull variable
     * Player action is used to keep track of the action performed by the player and the mob for animation
     * */
    public int getPlayerAction() {
        return playerAction;
    }
    public void setPlayerAction(int playerAction) {
        this.playerAction = playerAction;
    }
    public int getMobAction() {
        return mobAction;
    }
    public void setMobAction(int mobAction) {
        this.mobAction = mobAction;
    }
    public int getLastPlayerHp() {
        return lastPlayerHp;
    }
    public void setLastPlayerHp(int lastPlayerHp) {
        this.lastPlayerHp = lastPlayerHp;
    }

    /*
    * Used to clear console not yet used
    * */
    public static void clearConsole() {
        try {
            final String os = System.getProperty("os.name");

            if (os.contains("Windows")) {
                Runtime.getRuntime().exec("cls");
            }
            else {
                Runtime.getRuntime().exec("clear");
            }
        }
        catch (final Exception e)
        {
            //  Handle any exceptions.
        }
    }

    /*
    * Waiting function
    * */

    /*
     * all the "reset" functions does the same thing but differently according to each boxes, it create a box with certain dimensions and sides
     * it was kept separated to be easily modifiable, thus there is a bit of volontary code replication. (in theory two boxes could be completely different, not the case here)
     * */

    /*
     * resets external Border
     * */
    public void resetBorderDisplay(){
        String str = "  ┌" + "─".repeat(Math.max(0, this.width)) +
                "┐ ";
        borderWindow.add(str);

        for (int c = 0; c < this.height; c++) {
            String str0 = " *│" + " ".repeat(Math.max(0, this.width)) +
                    "│*";
            borderWindow.add(str0);
        }

        String str2 = "  └" + "─".repeat(Math.max(0, this.width)) +
                "┘ ";
        borderWindow.add(str2);
    }

    /*
     * resets Ennemy display
     * */
    public void resetEnnDisplay(){

        String strEnn0 = "┌" + "─".repeat(Math.max(0, (this.width / 2) - 2)) +
                "┐";
        enemy.add(0, strEnn0);
        String strEnn1 = "│" + " ".repeat(Math.max(0, (this.width / 2) - 2)) +
                "│";
        enemy.add(1, strEnn1);
        String strEnn2 = "│" + " ".repeat(Math.max(0, (this.width / 2) - 2)) +
                "│";
        enemy.add(2, strEnn2);
        String strEnn3 = "└" + "─".repeat(Math.max(0, (this.width / 2) - 2)) +
                "┘";
        enemy.add(3, strEnn3);
    }

    /*
     * resets Player display
     * */
    public void resetPlaDisplay(){

        String strPla0 = "┌" + "─".repeat(Math.max(0, (this.width / 2) - 2)) +
                "┐";
        player.add(0, strPla0);
        String strPla1 = "│" + " ".repeat(Math.max(0, (this.width / 2) - 2)) +
                "│";
        player.add(1, strPla1);
        String strPla2 = "│" + " ".repeat(Math.max(0, (this.width / 2) - 2)) +
                "│";
        player.add(2, strPla2);
        String strPla3 = "└" + "─".repeat(Math.max(0, (this.width / 2) - 2)) +
                "┘";
        player.add(3, strPla3);
    }

    /*
     * resets animation (middle-left window with no borders) display
     * */
    public void resetAnimationsDisplay(){
        this.aniSize = this.height - 15;
        for (int v = 0; v < this.aniSize; v++) {
            animations.add(v, " ".repeat(Math.max(0, (this.width / 2))));
        }
    }

    /*
     * resets announcements display (sidescrolling Bar with all game informations)
     * */
    public void resetAnnouncementDisplay(){
        String strAnn0 = "┌" + "─".repeat(Math.max(0, (this.width / 2) - 2)) +
                "┐";
        announcement.add(strAnn0);

        for (int v = 0; v < (this.height-2) - 7; v++) {
            String strAnn1 = "│" + " ".repeat(Math.max(0, (this.width / 2) - 2)) +
                    "│";
            announcement.add(strAnn1);
        }
        String strAnn2 = "└" + "─".repeat(Math.max(0, (this.width / 2) - 2)) +
                "┘";
        announcement.add(strAnn2);
    }

    /*
     * resets action box (Bottom one) not finished
     * */
    public void resetActionDisplay(){
        this.actionList.add(0,"Nothing");
        this.actionList.add(1,"Attack");
        this.actionList.add(2,"Defend");
        this.actionList.add(3,"Reload");

        String strAct0 = "┌" + "─".repeat(Math.max(0, this.width - 2)) +
                "┐";
        actions.add(strAct0);

        for (int v = 0; v < (this.height-(this.aniSize + 8))-2 ; v++) {
            String strAct1 = "│" + " ".repeat(Math.max(0, this.width - 2)) +
                    "│";
            actions.add(strAct1);
        }
        String strAct2 = "└" + "─".repeat(Math.max(0, this.width - 2)) +
                "┘";
        actions.add(strAct2);
    }


    /*
     * update ennemy box (Hp bar changing)
     * */
    public void updateEnnDisplay(){
        String bullets = "bullets : ";
        if (this.game.turns == 1){
            bullets += Integer.toString(this.game.mob.getAmmo());
        } else {
            bullets += "?";
        }

        String stat = this.game.mob.getQuality() + " " + this.game.mob.getClass().getSimpleName() + "  "
                + this.game.mob.getHp() + "/"+ this.game.mob.getMaxHp()
                + "  " + bullets;
        this.enemy.set(1,"│"+String.format("%"+ ((this.width / 2) - 2) + "s",stat)+"│");
        //██░
        StringBuilder str = new StringBuilder();
        int max = ((this.width/2)-2)/2;
        float ratio = (float)this.game.mob.getHp()/this.game.mob.getMaxHp();
        int cur = (int) (ratio * max);
        int mis = max - cur;
        str.append("█".repeat(Math.max(0, cur)));
        str.append("░".repeat(Math.max(0, mis)));
        this.enemy.set(2,"│"+String.format("%"+ ((this.width / 2) - 2) + "s", str.toString())+"│");
    }

    /*
     * update player box (Hp bar changing)
     * */
    public void updatePlaDisplay(){
        String stat = this.game.player.getName()+ "  " + this.game.player.getHp() + "/"+ this.game.player.getMaxHp();
        this.player.set(1,"│"+String.format("%-"+ ((this.width / 2) - 2) + "s",stat)+"│");
        //██░
        StringBuilder str = new StringBuilder();
        int max = ((this.width/2)-2)/2;
        float ratio = (float)this.game.player.getHp()/this.game.player.getMaxHp();
        int cur = (int) (ratio * max);
        int mis = max - cur;
        str.append("█".repeat(Math.max(0, cur)));
        str.append("░".repeat(Math.max(0, mis)));
        this.player.set(2,"│"+String.format("%-"+ ((this.width / 2) - 2) + "s", str.toString())+"│");
    }

    /*
    * update the central animation
    * */
    public void updateAnimation(){
        String ally = this.actionList.get(this.playerAction);
        String enn = this.actionList.get(this.mobAction);
        String tot = "          YOU "+ ally+"       ENNEMY "+ enn;
        this.animations.set(2, String.format("%-"+ this.width / 2 + "s",tot));
        String enndmg = String.format("%-"+ this.width / 4 + "s","");
        String allydmg = String.format("%"+ this.width / 4 + "s","");
        if(ally.equals("Attack")){
            if (this.game.player.getAmmo()-this.game.player.getWeapon().bps() < 0){
                String oob = "      ⚠OUT OF BULLETS ⚠ ️";
                this.animations.set(3, String.format("%-"+ this.width / 2 + "s",oob));
            }else{
                enndmg = String.format("%-"+ this.width / 4 + "s","        -" + (this.lastEnnemyHp - this.game.mob.getHp()));
            }
        }
        if(enn.equals("Attack")){
            allydmg = String.format("%"+ this.width / 4 + "s","-" + (this.lastPlayerHp - this.game.player.getHp()) +"         ");
        }
        this.animations.set(1, String.format("%"+ this.width / 2 + "s",allydmg+enndmg));
        this.lastEnnemyHp = this.game.mob.getHp();
        this.lastPlayerHp = this.game.player.getHp();
    }
    /*
    * updates the announcement box
    * */
    public void updateAnnouncementDisplay(){
        for(int i = 0; i < (this.height-2) - 7 && i<=announcementList.size()-1; i++){
            this.announcement.set(11-i,"│"+String.format("%-"+ ((this.width / 2) - 2) +
                    "s",this.announcementList.get(announcementList.size()-(i+1)))+"│");
        }
    }

    /*
    * adds an announcement to the list of announcement then push calls update announcement display
    * There is a bit of code replication here but we want announcement to be easily created and dynamic, anyone ca create a new annoucement
    * */
    public void announce(String s){

        if(s.equals("start")){
            this.announcementList.add("Welcome in 007");
            this.announcementList.add("↓   ↓   ↓   ↓   ↓   ↓   ↓ ");
            this.announcementList.add("Enter your name?");
            this.announcementList.add("");
        }
        if(s.equals("mobInfo")){
            this.lastPlayerHp = this.game.player.getHp();
            this.lastEnnemyHp = this.game.mob.getHp();
            String str = game.mob.getQuality()+ " " +game.mob.getClass().getSimpleName() + " : "+ game.mob.getHp() + "/"+ game.mob.getMaxHp() +
                    "HP";
            String str1 = "bullets: " + game.mob.getAmmo() + "   attaque: "+ game.mob.getAttack();
            this.announcementList.add("you encounter a NEW ENNEMY");
            this.announcementList.add("↓   ↓   ↓   ↓   ↓   ↓   ↓ ");
            this.announcementList.add(str);
            this.announcementList.add(str1);
            this.announcementList.add("");
        }

        if(s.equals("mobDead")){
            String str = "YOU KILLED "+ game.mob.getQuality()+ " " +game.mob.getClass().getSimpleName();
            this.announcementList.add(str);
            this.announcementList.add("");
        }

        if (s.equals("dropGun")){

            String str = "You Droped : " + game.mob.getWeapon().getClass().getSimpleName() + " Do you want it?" ;
            String str1 = "current weapon : " +game.player.getWeapon().getClass().getSimpleName() +
                    "--> Additionnal damages :" + game.player.getWeapon().damage();
            String str2 = " Bullet cost :" + game.player.getWeapon().bps() +" LifeSteal :" + game.player.getWeapon().lifeSelfImpact();
            String str3= game.mob.getWeapon().getClass().getSimpleName()  + "--> Additionnal damages :" + game.mob.getWeapon().damage();
            String str4 = " Bullet cost :" + game.mob.getWeapon().bps() +" LifeSteal :" + game.mob.getWeapon().lifeSelfImpact();

            //mob.getInfoWeapon();
            String str5 = "                            Y/N";
            this.announcementList.add(str);
            this.announcementList.add(str1);
            this.announcementList.add(str2);
            this.announcementList.add("");
            this.announcementList.add(str3);
            this.announcementList.add(str4);
            this.announcementList.add(str5);

        }
        if (s.equals("dropArmor")){

            String str = "You Droped : " + game.mob.getArmor().getClass().getSimpleName() + " Do you want it?" ;
            String str1 = "current armor : " +game.player.getArmor().getClass().getSimpleName() + "--> damage reduction :" + game.player.getArmor().damageReduced();
            String str2 = " added maxHP :" + game.player.getArmor().pdV() + " regeneration :" + game.player.getArmor().regen();
            String str3 = game.mob.getArmor().getClass().getSimpleName()  + "--> damage reduction :" + game.mob.getArmor().damageReduced();
            String str4 = " added maxHP :" + game.mob.getArmor().pdV() + " regeneration :" + game.mob.getArmor().regen();

            //mob.getInfoWeapon();
            String str5 = "                            Y/N";
            this.announcementList.add(str);
            this.announcementList.add(str1);
            this.announcementList.add(str2);
            this.announcementList.add("");
            this.announcementList.add(str3);
            this.announcementList.add(str4);
            this.announcementList.add(str5);
        }
        if(s.equals("upgrade")){
            String str0 ="    -----------UPGRADE MENU-----------";

            String str1 = "1 -> +10maxHp, 2 -> +5 attack, , 3 -> +3 bullets";
            this.announcementList.add(str0);
            this.announcementList.add(str1);
            this.announcementList.add("");
        }

        if (s.equals("plaDead")){
            String str0 = "----------------------------";
            String str1 ="          YOU DIED";
            String str2 = "----------------------------";
            this.announcementList.add("");
            this.announcementList.add(str0);
            this.announcementList.add(str1);
            this.announcementList.add(str2);
            this.announcementList.add("");
        }

        if (s.equals("regen")){
            int regenTotal = (game.player.getArmor().regen()+game.player.getRegen());
            String str1 ="you regenerates :" + regenTotal + " hp";
            this.announcementList.add(str1);
            this.announcementList.add("");
        }
        updateAnnouncementDisplay();
    }

    /*
    * updates action display
    * */
    public void updateActDisplay(){
        actions.set(2,"│"+String.format("%-"+ (this.width - 2) + "s","1 > ATTACK")+"│");
        actions.set(3,"│"+String.format("%-"+ (this.width - 2) + "s","2 > DEFEND")+"│");
        actions.set(4,"│"+String.format("%-"+ (this.width - 2) + "s","3 > RELOAD")+"│");
    }
    /*
     * Calculates the fullString according to each box then calls display()
     * This function could be more dynamic. changing boxes display is open but can be bothersome
     * */
    public void resetDisplay(){

        fullString = new StringBuilder(empty);

        for (int c = 0; c < this.height+2; c++) {
            if(c == 0){
                fullString.append(this.borderWindow.get(c));
                fullString.append("\n");
            } else if(c  < 5){
                fullString.append(this.borderWindow.get(c), 0, 3);
                fullString.append(this.enemy.get(c - 1));
                fullString.append(this.announcement.get(c - 1));
                fullString.append(this.borderWindow.get(c).substring(this.width + 3));
                fullString.append("\n");
            } else if(c < this.aniSize + 5) {
                fullString.append(this.borderWindow.get(c), 0, 3);
                fullString.append(this.animations.get(c - 5));
                fullString.append(this.announcement.get(c - 1));
                fullString.append(this.borderWindow.get(c).substring(this.width + 3));
                fullString.append("\n");
            } else if(c >= this.aniSize + 5 && c <this.aniSize + 9) {
                fullString.append(this.borderWindow.get(c), 0, 3);
                fullString.append(this.player.get(c-(this.aniSize + 5)));
                fullString.append(this.announcement.get(c-1));
                fullString.append(this.borderWindow.get(c).substring(this.width+3));
                fullString.append("\n");
            } else if (c != this.height+1){
                fullString.append(this.borderWindow.get(c), 0, 3);
                fullString.append(this.actions.get(c-(this.aniSize + 9)));
                fullString.append(this.borderWindow.get(c).substring(this.width+3));
                fullString.append("\n");
            } else {
                fullString.append(this.borderWindow.get(c));
                fullString.append("\n");
            }
        }
        display();
    }
    /*
    * prints the fullString
    * */
    public void display(){
        clearConsole();
        System.out.println(fullString.toString());
    }
}